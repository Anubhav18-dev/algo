//Tree Traversal(pre/in/post)
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
char arr[10000][20];
void inorder(int index,int size)
{
    if (index>size || strcmp(arr[index],"b")==0 || strcmp(arr[index],"B")==0)
        return;
    else
    {
        inorder(2*index,size);
        printf("%s ",arr[index]);
        inorder(2*index+1,size);
    }
}
void preorder(int index,int size)
{
    if (index>size || strcmp(arr[index],"b")==0 || strcmp(arr[index],"B")==0)
        return;
    else
    {
        printf("%s ",arr[index]);
        preorder(2*index,size);
        preorder(2*index+1,size);
    }
}
void postorder(int index,int size)
{
    if (index>size || strcmp(arr[index],"b")==0 || strcmp(arr[index],"B")==0)
        return;
    else
    {
        postorder(2*index,size);
        postorder(2*index+1,size);
        printf("%s ",arr[index]);
    }
}
int main() {
    int t,n,i,j,k,l;
   char in_str[20];
    scanf("%d",&t);
    while(t--)
    {
        scanf("%d",&n);
        for(i=1;i<=n;i++)
        {
            scanf("%s",&in_str);
            if(strcmp(in_str,"b")!=0 || strcmp(in_str,"B")!=0)
            strcpy(arr[i],in_str);
        }
        preorder(1,n);
        printf("\n");
        inorder(1,n);
        printf("\n");
        postorder(1,n);
        printf("\n");
    }
    return 0;
}

//Max and Min Heap
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
int main() {
  int i,j,f=-1,c=0,n; char a[10];
  scanf("%d",&n);
    for(i=0;i<n;i++)
    {
        scanf("%s",&a[i]);
        fflush(stdin);
    }
     for(i=0;i<n;i++){
        if (a[i]=='b')
            n--;
          fflush(stdin);}
        for(i=0;i<=n%2;i++)
    {
            if (a[i]>a[2*i+1] && a[i]>a[2*i+2] )
                f=1;
                else if (a[i]<a[2*i+1] && a[i]<a[2*i+2] )
                f=0;
              else if((a[i]>a[2*i+1] && a[i]<a[2*i+2]) || (a[i]<a[2*i+1] && a[i]>a[2*i+2]))
            {         
                c=1;
                break;
            } 
        }        
   if (f==1)
       printf("Max Heap");
    else if(f==0) 
         printf("Min Heap");
    if(c==1)
        printf("Invalid");
  
    return 0;
}
//Create Max Heap
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
int main() {
    int n,i,a[10],t,k=0;
    for(i=0;i<5;i++)
        scanf("%d",&a[i]);
    for(i=0;i<2;i++)
    {
        if(a[i]<a[2*i])
           k++;
        if(k==1)
        { t=a[i];
          a[i]=a[2*i];
         a[2*i]=t;
        }
        else
        {
            t=a[i];
          a[i]=a[2*i+1];
         a[2*i+1]=t;
        }
    }
        for(i=0;i<5;i++)
        printf("%d ",a[i]);
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */    
    return 0;
}
//Create Min Heap
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
int main() {
    int n,i,a[10],t,sml=0,k=0;
    for(i=1;i<=5;i++)
        scanf("%d",&a[i]);
    sml=a[1];
    for(i=2;i<=5;i++){
        if(sml>a[i])
            sml=a[i];
    }
 //   printf("%d     ",k);
  for(;;){
      if (a[1]==sml)
          break;
      else
      {
          i=1;
    for(i=1;i<=2;i++)
    {
        if(a[i]>a[2*i])      
        { t=a[i];
          a[i]=a[2*i];
         a[2*i]=t;
        }
        else if(a[i]>a[2*i+1])
        {
            t=a[i];
          a[i]=a[2*i+1];
         a[2*i+1]=t;
        }     
    }   
 }
  }
        for(i=1;i<=5;i++)
        printf("%d ",a[i]);

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */    
  //  return 0;
}
//sort set of string
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
int main(){
    int t, i, j, count_x[50];
    char final[50][50][50];
    scanf("%d",&t);
    int n = t;
    while(t--) {
        char c;
        int count = 0;
        c = getchar();
        char s[50], arr[50][50];
        scanf("%[^\n]", s);
        char *pch;
        pch = strtok(s, " ,-.");
        while(pch != NULL){
            strcpy(arr[count++], pch);
            pch = strtok(NULL, " ,.-");
        }
        for(i=0;i<count-1;i++){
            for(j=0;j<count-i-1;j++){
                if(strlen(arr[j]) > strlen(arr[j+1])){
                    char x[50];
                    strcpy(x, arr[j]);
                    strcpy(arr[j], arr[j+1]);
                    strcpy(arr[j+1], x);
                }
            }
        }
        for(i=0;i<count;i++) strcpy(final[n-t-1][i], arr[i]);
        count_x[n-t-1] = count;
    }
    for(i=0;i<n;i++){
        for(j=0;j<count_x[i];j++){
            printf("%s ", final[i][j]);
        }
        printf("\n");
    }
    return 0;
}

//Cookies
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
int main() {
    int i,n,a[100],t,k,j,temp,m,c=0,p;
    scanf("%d%d",&n,&t);
        for(i=0;i<n;i++)
            scanf("%d",&a[i]);
            p=n;
            for(;;)
            {     
            for(i=0;i<n-1;i++)
    {
        for(j=0;j<n-i-1;j++)
        {
            if(a[j]>a[j+1])
            {
                temp=a[j];
                a[j]=a[j+1];
                a[j+1]=temp;
            }
        }
    }
    k=a[0];
    for(i=0;i<p;i++)
    {
        if(k>a[i])
        {
            k=a[i];
            c++;
        }
    }
            m=(1*a[0])+(2*a[1]);
        a[0]=m;
    for(i=0;i<n-2;i++)
    {
        a[i+1]=a[i+2];
        p=i;
    }
    if(t<a[0])
    break;
         }
        printf("%d",p-1);
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */    
    return 0;
}
//Max Sub array
#include <stdio.h>
#include <stdlib.h>
int maxSubArraySum(int a[], int size, int *begin, int *end)
{
    int max_so_far = 0, max_end = 0;
    int i, current_index = 0;
 
    for (i = 0; i < size; i++)
    {
        max_end = max_end + a[i];
        if (max_end <= 0)
        {
            max_end = 0;
            current_index = i + 1;
        }
        else if (max_so_far < max_end)
        {
            max_so_far = max_end;
            *begin = current_index;
            *end = i;
        }
   }
   return max_so_far;
}
int main()
{
    int n;
    scanf("%d", &n);
    int arr[n];
    for(int i=0;i<n;i++)
        scanf("%d", &arr[i]);
    int start = 0, end = 0;
    int size = sizeof(arr) / sizeof(arr[0]);
 
    printf("%d", maxSubArraySum(arr, size, &start, &end));
    getchar();
    return 0;
}
//Markâ€™s Cakewalk
#include <math.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <assert.h>
#include <limits.h>
#include <stdbool.h>
void swap(int *a,int *b)
{
    int temp;
    temp = *a;
    *a = *b;
    *b=temp;
}
int partition(int *x,int start,int end)
{
    int pivot,pindex,i;
    pivot = x[end];
    pindex = start;
    for(i=start;i<end;i++)
    {
        if(x[i]>=pivot)
          {
            swap(&x[i],&x[pindex]);
            pindex = pindex + 1;
          }
    }
    swap(&x[pindex],&x[end]);
    return pindex;
}
void quicksort(int *x,int start,int end)
{
    if(start<end)
   {
     int i = partition(x,start,end);
      quicksort(x,start,i-1);
      quicksort(x,i+1,end);
    }
}
int main(){
    int n; 
    scanf("%d",&n);
    int *calories = malloc(sizeof(int) * n);
    for(int calories_i = 0; calories_i < n; calories_i++)
    {
       scanf("%d",&calories[calories_i]);
    }
    quicksort(calories,0,n-1);
    int i;
    long long int sum = 0;
    for(i=0;i<n;i++)
    {
        sum += calories[i]*((long long int)pow(2,i));
    }    
    printf("%lld",sum);
    return 0;
}
//All Pair Shortest path
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
int main() {
int n,arr[10][10],array[10][10],i,j,z;
    scanf("%d",&n);
    for(i=0;i<n;i++)
    {
        for(j=0;j<n;j++)
        {
            scanf("%d",&arr[i][j]);
        }
    }
         for(i=0;i<n;i++)
            for(j=0;j<n;j++)
                array[i][j]=arr[i][j];
    for(z=0;z<n;z++)  
        for(i=0;i<n;i++)
            for(j=0;j<n;j++)
                if(array[i][j] > array[i][z] + array[z][j])
                    array[i][j]=array[i][z] + array[z][j];  
    for(i=0;i<n;i++)
    {
        for(j=0;j<n;j++)
        {
            printf("%d ",array[i][j]);
        }
        printf("\n");
    }        
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */    
    return 0;
}

